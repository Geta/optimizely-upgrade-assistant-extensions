{
  // This optional property gives a friendly name used for the extension
  // while running and logging output from Upgrade Assistant.
  "ExtensionName": "EPI Source updater extension",

  // Config settings can be provided for this or other extensions.
  // Extensions can update config settings used by other extensions
  // (including the default extensions) with extensions loading later
  // overriding those loaded earlier.
  "FindReplaceOptions": {
    "Replacements": {
      "// TODO": "// Updated todo",
      "[AcceptVerbs(HttpVerbs.Get | HttpVerbs.Post)]": "[AcceptVerbs(new string[] {\"GET\",\"POST\" })]",
      //"IFindUIConfiguration": "FindOptions",
      //"findUIConfiguration": "findUIOptions"
    }
  },

  "ObsoleteOptions": {
    "Usings": [
      "Mediachase.BusinessFoundation"
    ]
  },

  "RplaceMembers": {
    "Usings": [
      "Mediachase.BusinessFoundation"
    ]
  },

  "SourceUpdater": {
    "AdditionalAnalyzerTexts": [
      "EpiTypeReplacements.typemap",
      "EpiClassReplacements.classmap"
    ]
  },

  "ConfigUpdater": {
    "ConfigFilePaths": [
      "app.config"
    ]
  },

  // The optional ExtensionServiceProviders property lists libraries
  // that contain IExtensionServiceProvider implementations. These
  // types register services for the extension with Upgrade Assistant's
  // dependency injection container.
  //
  // In this case, we list the SourceUpdaterSample library that contains
  // SourceUpdaterSampleServiceProvider, which will be used to register
  // the analyzer and code fix provider in this extension for use during
  // Upgrade Assistant's source updater step.
  "ExtensionServiceProviders": [
    "Epi.Source.Updater.dll"
  ]
}