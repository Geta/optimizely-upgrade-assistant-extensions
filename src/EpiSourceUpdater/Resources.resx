<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EpiAttributeRemoverDescription" xml:space="preserve">
    <value>For Class Attribute: TemplateDescriptor, Argument Default will be removed.</value>
  </data>
  <data name="EpiAttributeRemoverMessageFormat" xml:space="preserve">
    <value>Attribute Argument '{0}' will be removed</value>
  </data>
  <data name="EpiAttributeRemoverTitle" xml:space="preserve">
    <value>CMS Attribute TemplateDescriptor will be updated</value>
  </data>
  <data name="EpiClassUpgradeDescription" xml:space="preserve">
    <value>This class is no longer supported on CMS and will be replaced</value>
  </data>
  <data name="EpiClassUpgradeMessageFormat" xml:space="preserve">
    <value>Class '{0}' will be replaced with '{1}'</value>
  </data>
  <data name="EpiClassUpgradeTitle" xml:space="preserve">
    <value>CMS Classes like PartialContentController or BlockController will be replaced</value>
  </data>
  <data name="EpiDisallowedTypesDescription" xml:space="preserve">
    <value>In CMS 12 override of PropertyData ParseToObject is no longer required. Functionality can be achieved by creating a new instance and calling the ParsToSelf method.</value>
  </data>
  <data name="EpiDisallowedTypesMessageFormat" xml:space="preserve">
    <value>Type '{0}' Method override will be removed</value>
  </data>
  <data name="EpiDisallowedTypesTitle" xml:space="preserve">
    <value>CMS 12 projects should no longer use overrides for ParseToObject</value>
  </data>
  <data name="EpiDisplayChannelDescription" xml:space="preserve">
    <value>CMS Display Channels will be updated.</value>
  </data>
  <data name="EpiDisplayChannelFormat" xml:space="preserve">
    <value>Argument 'HttpContextBase' will be replaced with 'HttpContext'</value>
  </data>
  <data name="EpiDisplayChannelTitle" xml:space="preserve">
    <value>CMS display channels will be updated</value>
  </data>
  <data name="EpiMemberReplacementDescription" xml:space="preserve">
    <value>The Interface IFindUIConfiguration is no longer supported and will be replaced</value>
  </data>
  <data name="EpiMemberReplacementMessageFormat" xml:space="preserve">
    <value>Interface '{0}' will be replaced with '{1}'</value>
  </data>
  <data name="EpiMemberReplacementTitle" xml:space="preserve">
    <value>IFindUIConfiguration will be replaced with FindOptions</value>
  </data>
  <data name="EpiObsoleteUsingDescription" xml:space="preserve">
    <value>Obsolete using statements should be removed.</value>
  </data>
  <data name="EpiObsoleteUsingMessageFormat" xml:space="preserve">
    <value>Using statement {0} should be removed</value>
  </data>
  <data name="EpiObsoleteUsingTitle" xml:space="preserve">
    <value>Commerce: Remove obsolete usings like Mediachase.BusinessFoundation</value>
  </data>
  <data name="EpiPartialControllerDescription" xml:space="preserve">
    <value>CMS partial controllers will be updated.</value>
  </data>
  <data name="EpiPartialControllerFormat" xml:space="preserve">
    <value>Method 'Index' will be replaced with 'InvokeComponent'</value>
  </data>
  <data name="EpiPartialControllerTitle" xml:space="preserve">
    <value>CMS partial controllers will be updated</value>
  </data>
  <data name="EpiPartialRouterDescription" xml:space="preserve">
    <value>CMS partial routers will be updated.</value>
  </data>
  <data name="EpiPartialRouterMessageFormat" xml:space="preserve">
    <value>Method signatures will be updated</value>
  </data>
  <data name="EpiPartialRouterTitle" xml:space="preserve">
    <value>CMS partial routers will be updated</value>
  </data>
  <data name="MakeConstDescription" xml:space="preserve">
    <value>Variables that are not set after they are created should be marked as constant</value>
  </data>
  <data name="MakeConstMessageFormat" xml:space="preserve">
    <value>Variable '{0}' should be marked const</value>
  </data>
  <data name="MakeConstTitle" xml:space="preserve">
    <value>Replace obsolete Types and Attributes eg. TemplateDescriptor(Default)</value>
  </data>
  <data name="MetadataAwareDescription" xml:space="preserve">
    <value>Convert IMetadataAware to IDisplayMetadataProvider.</value>
  </data>
  <data name="MetadataAwareMessageFormat" xml:space="preserve">
    <value>Implementation of IMetadataAware will be replaced with IDisplayMetadataProvider</value>
  </data>
  <data name="MetadataAwareTitle" xml:space="preserve">
    <value>Convert IMetadataAware to IDisplayMetadataProvider</value>
  </data>
  <data name="TypeUpgradeDescription" xml:space="preserve">
    <value>This type is no longer supported on CMS and should be replaced.</value>
  </data>
  <data name="TypeUpgradeMessageFormat" xml:space="preserve">
    <value>Type '{0}' should be replaced with '{1}'</value>
  </data>
  <data name="TypeUpgradeTitle" xml:space="preserve">
    <value>CMS Types and Namespaces should be upgraded</value>
  </data>
</root>